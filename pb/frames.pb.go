//
//Copyright 2018 Iguazio Systems Ltd.
//
//Licensed under the Apache License, Version 2.0 (the "License") with
//an addition restriction as set forth herein. You may not use this
//file except in compliance with the License. You may obtain a copy of
//the License at http://www.apache.org/licenses/LICENSE-2.0.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//implied. See the License for the specific language governing
//permissions and limitations under the License.
//
//In addition, you may not use the software for any purposes that are
//illegal under applicable law, and the grant of the foregoing license
//under the Apache 2.0 license is conditioned upon your compliance with
//such restriction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: frames.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DType int32

const (
	DType_NONE    DType = 0
	DType_INTEGER DType = 1
	DType_FLOAT   DType = 2
	DType_STRING  DType = 3
	DType_TIME    DType = 4
	DType_BOOLEAN DType = 5
	DType_NULL    DType = 6
)

// Enum value maps for DType.
var (
	DType_name = map[int32]string{
		0: "NONE",
		1: "INTEGER",
		2: "FLOAT",
		3: "STRING",
		4: "TIME",
		5: "BOOLEAN",
		6: "NULL",
	}
	DType_value = map[string]int32{
		"NONE":    0,
		"INTEGER": 1,
		"FLOAT":   2,
		"STRING":  3,
		"TIME":    4,
		"BOOLEAN": 5,
		"NULL":    6,
	}
)

func (x DType) Enum() *DType {
	p := new(DType)
	*p = x
	return p
}

func (x DType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DType) Descriptor() protoreflect.EnumDescriptor {
	return file_frames_proto_enumTypes[0].Descriptor()
}

func (DType) Type() protoreflect.EnumType {
	return &file_frames_proto_enumTypes[0]
}

func (x DType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DType.Descriptor instead.
func (DType) EnumDescriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{0}
}

type ErrorOptions int32

const (
	ErrorOptions_FAIL   ErrorOptions = 0 // Default to fail on error
	ErrorOptions_IGNORE ErrorOptions = 1
)

// Enum value maps for ErrorOptions.
var (
	ErrorOptions_name = map[int32]string{
		0: "FAIL",
		1: "IGNORE",
	}
	ErrorOptions_value = map[string]int32{
		"FAIL":   0,
		"IGNORE": 1,
	}
)

func (x ErrorOptions) Enum() *ErrorOptions {
	p := new(ErrorOptions)
	*p = x
	return p
}

func (x ErrorOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_frames_proto_enumTypes[1].Descriptor()
}

func (ErrorOptions) Type() protoreflect.EnumType {
	return &file_frames_proto_enumTypes[1]
}

func (x ErrorOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorOptions.Descriptor instead.
func (ErrorOptions) EnumDescriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{1}
}

type Column_Kind int32

const (
	Column_SLICE Column_Kind = 0
	Column_LABEL Column_Kind = 1
)

// Enum value maps for Column_Kind.
var (
	Column_Kind_name = map[int32]string{
		0: "SLICE",
		1: "LABEL",
	}
	Column_Kind_value = map[string]int32{
		"SLICE": 0,
		"LABEL": 1,
	}
)

func (x Column_Kind) Enum() *Column_Kind {
	p := new(Column_Kind)
	*p = x
	return p
}

func (x Column_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Column_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_frames_proto_enumTypes[2].Descriptor()
}

func (Column_Kind) Type() protoreflect.EnumType {
	return &file_frames_proto_enumTypes[2]
}

func (x Column_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Column_Kind.Descriptor instead.
func (Column_Kind) EnumDescriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{0, 0}
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  Column_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=pb.Column_Kind" json:"kind,omitempty"`
	Name  string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Dtype DType       `protobuf:"varint,3,opt,name=dtype,proto3,enum=pb.DType" json:"dtype,omitempty"`
	Size  int64       `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"` // used only in LABEL
	// In slice columns these arrays will be of length 1
	Ints    []int64   `protobuf:"varint,5,rep,packed,name=ints,proto3" json:"ints,omitempty"`
	Floats  []float64 `protobuf:"fixed64,6,rep,packed,name=floats,proto3" json:"floats,omitempty"`
	Strings []string  `protobuf:"bytes,7,rep,name=strings,proto3" json:"strings,omitempty"`
	Times   []int64   `protobuf:"varint,8,rep,packed,name=times,proto3" json:"times,omitempty"` // epoch nano
	Bools   []bool    `protobuf:"varint,9,rep,packed,name=bools,proto3" json:"bools,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{0}
}

func (x *Column) GetKind() Column_Kind {
	if x != nil {
		return x.Kind
	}
	return Column_SLICE
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetDtype() DType {
	if x != nil {
		return x.Dtype
	}
	return DType_NONE
}

func (x *Column) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Column) GetInts() []int64 {
	if x != nil {
		return x.Ints
	}
	return nil
}

func (x *Column) GetFloats() []float64 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *Column) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *Column) GetTimes() []int64 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *Column) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

// Union of values
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_Ival
	//	*Value_Fval
	//	*Value_Sval
	//	*Value_Tval
	//	*Value_Bval
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{1}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetIval() int64 {
	if x, ok := x.GetValue().(*Value_Ival); ok {
		return x.Ival
	}
	return 0
}

func (x *Value) GetFval() float64 {
	if x, ok := x.GetValue().(*Value_Fval); ok {
		return x.Fval
	}
	return 0
}

func (x *Value) GetSval() string {
	if x, ok := x.GetValue().(*Value_Sval); ok {
		return x.Sval
	}
	return ""
}

func (x *Value) GetTval() int64 {
	if x, ok := x.GetValue().(*Value_Tval); ok {
		return x.Tval
	}
	return 0
}

func (x *Value) GetBval() bool {
	if x, ok := x.GetValue().(*Value_Bval); ok {
		return x.Bval
	}
	return false
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Ival struct {
	Ival int64 `protobuf:"varint,1,opt,name=ival,proto3,oneof"`
}

type Value_Fval struct {
	Fval float64 `protobuf:"fixed64,2,opt,name=fval,proto3,oneof"`
}

type Value_Sval struct {
	Sval string `protobuf:"bytes,3,opt,name=sval,proto3,oneof"`
}

type Value_Tval struct {
	Tval int64 `protobuf:"varint,4,opt,name=tval,proto3,oneof"` // epoch nano
}

type Value_Bval struct {
	Bval bool `protobuf:"varint,5,opt,name=bval,proto3,oneof"`
}

func (*Value_Ival) isValue_Value() {}

func (*Value_Fval) isValue_Value() {}

func (*Value_Sval) isValue_Value() {}

func (*Value_Tval) isValue_Value() {}

func (*Value_Bval) isValue_Value() {}

type NullValuesMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NullColumns map[string]bool `protobuf:"bytes,1,rep,name=nullColumns,proto3" json:"nullColumns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *NullValuesMap) Reset() {
	*x = NullValuesMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullValuesMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullValuesMap) ProtoMessage() {}

func (x *NullValuesMap) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullValuesMap.ProtoReflect.Descriptor instead.
func (*NullValuesMap) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{2}
}

func (x *NullValuesMap) GetNullColumns() map[string]bool {
	if x != nil {
		return x.NullColumns
	}
	return nil
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns    []*Column         `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Indices    []*Column         `protobuf:"bytes,2,rep,name=indices,proto3" json:"indices,omitempty"`
	Labels     map[string]*Value `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error      string            `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"` // Used in errors when reading over HTTP
	NullValues []*NullValuesMap  `protobuf:"bytes,5,rep,name=null_values,json=nullValues,proto3" json:"null_values,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{3}
}

func (x *Frame) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Frame) GetIndices() []*Column {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Frame) GetLabels() map[string]*Value {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Frame) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Frame) GetNullValues() []*NullValuesMap {
	if x != nil {
		return x.NullValues
	}
	return nil
}

// TODO: Place these under TableSchema
type SchemaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Doc        string            `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`
	Default    *Value            `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Type       string            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Properties map[string]*Value `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchemaField) Reset() {
	*x = SchemaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaField) ProtoMessage() {}

func (x *SchemaField) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaField.ProtoReflect.Descriptor instead.
func (*SchemaField) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{4}
}

func (x *SchemaField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaField) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *SchemaField) GetDefault() *Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *SchemaField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SchemaField) GetProperties() map[string]*Value {
	if x != nil {
		return x.Properties
	}
	return nil
}

type SchemaKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardingKey []string `protobuf:"bytes,1,rep,name=sharding_key,json=shardingKey,proto3" json:"sharding_key,omitempty"`
	SortingKey  []string `protobuf:"bytes,2,rep,name=sorting_key,json=sortingKey,proto3" json:"sorting_key,omitempty"`
}

func (x *SchemaKey) Reset() {
	*x = SchemaKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaKey) ProtoMessage() {}

func (x *SchemaKey) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaKey.ProtoReflect.Descriptor instead.
func (*SchemaKey) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{5}
}

func (x *SchemaKey) GetShardingKey() []string {
	if x != nil {
		return x.ShardingKey
	}
	return nil
}

func (x *SchemaKey) GetSortingKey() []string {
	if x != nil {
		return x.SortingKey
	}
	return nil
}

// TODO: Rename to Schema?
type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Namespace string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Doc       string         `protobuf:"bytes,4,opt,name=doc,proto3" json:"doc,omitempty"`
	Aliases   []string       `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Fields    []*SchemaField `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	Key       *SchemaKey     `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{6}
}

func (x *TableSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TableSchema) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TableSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableSchema) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *TableSchema) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *TableSchema) GetFields() []*SchemaField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TableSchema) GetKey() *SchemaKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type JoinStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JoinStruct) Reset() {
	*x = JoinStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinStruct) ProtoMessage() {}

func (x *JoinStruct) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinStruct.ProtoReflect.Descriptor instead.
func (*JoinStruct) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{7}
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Container string `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	Path      string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	User      string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Password  string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Token     string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Id        string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{8}
}

func (x *Session) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Session) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *Session) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Session) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Session) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Session) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session      *Session      `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Backend      string        `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
	Schema       *TableSchema  `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	DataFormat   string        `protobuf:"bytes,4,opt,name=data_format,json=dataFormat,proto3" json:"data_format,omitempty"`
	RowLayout    bool          `protobuf:"varint,5,opt,name=row_layout,json=rowLayout,proto3" json:"row_layout,omitempty"`
	MultiIndex   bool          `protobuf:"varint,6,opt,name=multi_index,json=multiIndex,proto3" json:"multi_index,omitempty"` // TSDB
	Query        string        `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`                              // TSDB - SQL Query
	Table        string        `protobuf:"bytes,8,opt,name=table,proto3" json:"table,omitempty"`                              // Table name
	Columns      []string      `protobuf:"bytes,9,rep,name=columns,proto3" json:"columns,omitempty"`
	Filter       string        `protobuf:"bytes,10,opt,name=filter,proto3" json:"filter,omitempty"`
	GroupBy      string        `protobuf:"bytes,11,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"` // TSDB
	Join         []*JoinStruct `protobuf:"bytes,12,rep,name=join,proto3" json:"join,omitempty"`
	Limit        int64         `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
	MessageLimit int64         `protobuf:"varint,14,opt,name=message_limit,json=messageLimit,proto3" json:"message_limit,omitempty"`
	Marker       string        `protobuf:"bytes,15,opt,name=marker,proto3" json:"marker,omitempty"`
	ResetIndex   bool          `protobuf:"varint,29,opt,name=reset_index,json=resetIndex,proto3" json:"reset_index,omitempty"`
	// NoSQL
	Segments          []int64  `protobuf:"varint,16,rep,packed,name=segments,proto3" json:"segments,omitempty"`
	TotalSegments     int64    `protobuf:"varint,17,opt,name=total_segments,json=totalSegments,proto3" json:"total_segments,omitempty"`
	ShardingKeys      []string `protobuf:"bytes,18,rep,name=sharding_keys,json=shardingKeys,proto3" json:"sharding_keys,omitempty"`
	SortKeyRangeStart string   `protobuf:"bytes,19,opt,name=sort_key_range_start,json=sortKeyRangeStart,proto3" json:"sort_key_range_start,omitempty"`
	SortKeyRangeEnd   string   `protobuf:"bytes,20,opt,name=sort_key_range_end,json=sortKeyRangeEnd,proto3" json:"sort_key_range_end,omitempty"`
	// TSDB
	Start             string `protobuf:"bytes,21,opt,name=start,proto3" json:"start,omitempty"`
	End               string `protobuf:"bytes,22,opt,name=end,proto3" json:"end,omitempty"`
	Step              string `protobuf:"bytes,23,opt,name=step,proto3" json:"step,omitempty"`
	Aggregators       string `protobuf:"bytes,24,opt,name=aggregators,proto3" json:"aggregators,omitempty"`
	AggregationWindow string `protobuf:"bytes,28,opt,name=aggregation_window,json=aggregationWindow,proto3" json:"aggregation_window,omitempty"`
	// Stream
	Seek     string `protobuf:"bytes,25,opt,name=seek,proto3" json:"seek,omitempty"`
	ShardId  string `protobuf:"bytes,26,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Sequence int64  `protobuf:"varint,27,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{9}
}

func (x *ReadRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ReadRequest) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *ReadRequest) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ReadRequest) GetDataFormat() string {
	if x != nil {
		return x.DataFormat
	}
	return ""
}

func (x *ReadRequest) GetRowLayout() bool {
	if x != nil {
		return x.RowLayout
	}
	return false
}

func (x *ReadRequest) GetMultiIndex() bool {
	if x != nil {
		return x.MultiIndex
	}
	return false
}

func (x *ReadRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ReadRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ReadRequest) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ReadRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ReadRequest) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *ReadRequest) GetJoin() []*JoinStruct {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *ReadRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReadRequest) GetMessageLimit() int64 {
	if x != nil {
		return x.MessageLimit
	}
	return 0
}

func (x *ReadRequest) GetMarker() string {
	if x != nil {
		return x.Marker
	}
	return ""
}

func (x *ReadRequest) GetResetIndex() bool {
	if x != nil {
		return x.ResetIndex
	}
	return false
}

func (x *ReadRequest) GetSegments() []int64 {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *ReadRequest) GetTotalSegments() int64 {
	if x != nil {
		return x.TotalSegments
	}
	return 0
}

func (x *ReadRequest) GetShardingKeys() []string {
	if x != nil {
		return x.ShardingKeys
	}
	return nil
}

func (x *ReadRequest) GetSortKeyRangeStart() string {
	if x != nil {
		return x.SortKeyRangeStart
	}
	return ""
}

func (x *ReadRequest) GetSortKeyRangeEnd() string {
	if x != nil {
		return x.SortKeyRangeEnd
	}
	return ""
}

func (x *ReadRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *ReadRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *ReadRequest) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *ReadRequest) GetAggregators() string {
	if x != nil {
		return x.Aggregators
	}
	return ""
}

func (x *ReadRequest) GetAggregationWindow() string {
	if x != nil {
		return x.AggregationWindow
	}
	return ""
}

func (x *ReadRequest) GetSeek() string {
	if x != nil {
		return x.Seek
	}
	return ""
}

func (x *ReadRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ReadRequest) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type InitialWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session       *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Backend       string   `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
	Table         string   `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	InitialData   *Frame   `protobuf:"bytes,4,opt,name=initial_data,json=initialData,proto3" json:"initial_data,omitempty"`
	Expression    string   `protobuf:"bytes,5,opt,name=expression,proto3" json:"expression,omitempty"`                            // NoSQL
	More          bool     `protobuf:"varint,6,opt,name=more,proto3" json:"more,omitempty"`                                       // Stream
	PartitionKeys []string `protobuf:"bytes,7,rep,name=partition_keys,json=partitionKeys,proto3" json:"partition_keys,omitempty"` // NoSQL
	Condition     string   `protobuf:"bytes,8,opt,name=condition,proto3" json:"condition,omitempty"`                              // NoSQL
	SaveMode      string   `protobuf:"bytes,9,opt,name=save_mode,json=saveMode,proto3" json:"save_mode,omitempty"`                // NoSQL
}

func (x *InitialWriteRequest) Reset() {
	*x = InitialWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialWriteRequest) ProtoMessage() {}

func (x *InitialWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialWriteRequest.ProtoReflect.Descriptor instead.
func (*InitialWriteRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{10}
}

func (x *InitialWriteRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *InitialWriteRequest) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *InitialWriteRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *InitialWriteRequest) GetInitialData() *Frame {
	if x != nil {
		return x.InitialData
	}
	return nil
}

func (x *InitialWriteRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *InitialWriteRequest) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *InitialWriteRequest) GetPartitionKeys() []string {
	if x != nil {
		return x.PartitionKeys
	}
	return nil
}

func (x *InitialWriteRequest) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *InitialWriteRequest) GetSaveMode() string {
	if x != nil {
		return x.SaveMode
	}
	return ""
}

type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*WriteRequest_Request
	//	*WriteRequest_Frame
	Type isWriteRequest_Type `protobuf_oneof:"type"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{11}
}

func (m *WriteRequest) GetType() isWriteRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *WriteRequest) GetRequest() *InitialWriteRequest {
	if x, ok := x.GetType().(*WriteRequest_Request); ok {
		return x.Request
	}
	return nil
}

func (x *WriteRequest) GetFrame() *Frame {
	if x, ok := x.GetType().(*WriteRequest_Frame); ok {
		return x.Frame
	}
	return nil
}

type isWriteRequest_Type interface {
	isWriteRequest_Type()
}

type WriteRequest_Request struct {
	Request *InitialWriteRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type WriteRequest_Frame struct {
	Frame *Frame `protobuf:"bytes,2,opt,name=frame,proto3,oneof"`
}

func (*WriteRequest_Request) isWriteRequest_Type() {}

func (*WriteRequest_Frame) isWriteRequest_Type() {}

type WriteRespose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames int64 `protobuf:"varint,1,opt,name=frames,proto3" json:"frames,omitempty"`
	Rows   int64 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *WriteRespose) Reset() {
	*x = WriteRespose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRespose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRespose) ProtoMessage() {}

func (x *WriteRespose) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRespose.ProtoReflect.Descriptor instead.
func (*WriteRespose) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{12}
}

func (x *WriteRespose) GetFrames() int64 {
	if x != nil {
		return x.Frames
	}
	return 0
}

func (x *WriteRespose) GetRows() int64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

// CreateRequest is a table creation request
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *Session     `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Backend  string       `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"` // name of the backend
	Table    string       `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`     // Table name (path)
	Schema   *TableSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`   // Schema (for describing unstructured/schemaless data)
	IfExists ErrorOptions `protobuf:"varint,5,opt,name=if_exists,json=ifExists,proto3,enum=pb.ErrorOptions" json:"if_exists,omitempty"`
	// TSDB
	Rate                   string `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"` //Sample rate
	Aggregates             string `protobuf:"bytes,7,opt,name=aggregates,proto3" json:"aggregates,omitempty"`
	AggregationGranularity string `protobuf:"bytes,8,opt,name=aggregation_granularity,json=aggregationGranularity,proto3" json:"aggregation_granularity,omitempty"`
	// Stream
	Shards         int64 `protobuf:"varint,9,opt,name=shards,proto3" json:"shards,omitempty"`
	RetentionHours int64 `protobuf:"varint,10,opt,name=retention_hours,json=retentionHours,proto3" json:"retention_hours,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{13}
}

func (x *CreateRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CreateRequest) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *CreateRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CreateRequest) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateRequest) GetIfExists() ErrorOptions {
	if x != nil {
		return x.IfExists
	}
	return ErrorOptions_FAIL
}

func (x *CreateRequest) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *CreateRequest) GetAggregates() string {
	if x != nil {
		return x.Aggregates
	}
	return ""
}

func (x *CreateRequest) GetAggregationGranularity() string {
	if x != nil {
		return x.AggregationGranularity
	}
	return ""
}

func (x *CreateRequest) GetShards() int64 {
	if x != nil {
		return x.Shards
	}
	return 0
}

func (x *CreateRequest) GetRetentionHours() int64 {
	if x != nil {
		return x.RetentionHours
	}
	return 0
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{14}
}

// DeleteRequest is a deletion request
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session   *Session     `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Backend   string       `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`                                            // Name of the backend
	Table     string       `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`                                                // Table name (path)
	Filter    string       `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                              // Filter string for selective delete
	IfMissing ErrorOptions `protobuf:"varint,5,opt,name=if_missing,json=ifMissing,proto3,enum=pb.ErrorOptions" json:"if_missing,omitempty"` // Ignore error on missing table
	// TSDB and Stream specific fields
	Start   string   `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	End     string   `protobuf:"bytes,7,opt,name=end,proto3" json:"end,omitempty"`
	Metrics []string `protobuf:"bytes,8,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *DeleteRequest) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *DeleteRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DeleteRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *DeleteRequest) GetIfMissing() ErrorOptions {
	if x != nil {
		return x.IfMissing
	}
	return ErrorOptions_FAIL
}

func (x *DeleteRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *DeleteRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *DeleteRequest) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{16}
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{17}
}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame *Frame `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	Rows  int64  `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{18}
}

func (x *ExecResponse) GetFrame() *Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *ExecResponse) GetRows() int64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session    *Session          `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Backend    string            `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`                                                                                   // Name of the backend
	Table      string            `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`                                                                                       // Table name (path)
	Command    string            `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`                                                                                   // Command to execute
	Args       map[string]*Value `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Command arguments
	Expression string            `protobuf:"bytes,6,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{19}
}

func (x *ExecRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExecRequest) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *ExecRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ExecRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ExecRequest) GetArgs() map[string]*Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{20}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session      *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Backend      string   `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`                                 // Filter by backend type
	Table        string   `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`                                     // Filter by Table name
	User         string   `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`                                       // Filter by the user executed the command
	Action       string   `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`                                   // Filter by Action type
	MinStartTime string   `protobuf:"bytes,6,opt,name=min_start_time,json=minStartTime,proto3" json:"min_start_time,omitempty"` // Filter time range
	MaxStartTime string   `protobuf:"bytes,7,opt,name=max_start_time,json=maxStartTime,proto3" json:"max_start_time,omitempty"` // Filter time range
	Container    string   `protobuf:"bytes,8,opt,name=container,proto3" json:"container,omitempty"`                             // Filter time range
	MinDuration  int64    `protobuf:"varint,9,opt,name=min_duration,json=minDuration,proto3" json:"min_duration,omitempty"`     // Filter time range
	MaxDuration  int64    `protobuf:"varint,10,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`    // Filter time range
}

func (x *HistoryRequest) Reset() {
	*x = HistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest) ProtoMessage() {}

func (x *HistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest.ProtoReflect.Descriptor instead.
func (*HistoryRequest) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{21}
}

func (x *HistoryRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *HistoryRequest) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *HistoryRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *HistoryRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HistoryRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *HistoryRequest) GetMinStartTime() string {
	if x != nil {
		return x.MinStartTime
	}
	return ""
}

func (x *HistoryRequest) GetMaxStartTime() string {
	if x != nil {
		return x.MaxStartTime
	}
	return ""
}

func (x *HistoryRequest) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *HistoryRequest) GetMinDuration() int64 {
	if x != nil {
		return x.MinDuration
	}
	return 0
}

func (x *HistoryRequest) GetMaxDuration() int64 {
	if x != nil {
		return x.MaxDuration
	}
	return 0
}

var File_frames_proto protoreflect.FileDescriptor

var file_frames_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0x86, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x23, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x1c, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x01, 0x22, 0x7e, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x76,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x76, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x04, 0x73, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x76, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x74, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04,
	0x62, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x76,
	0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0d,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a,
	0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x44, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x23,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x48, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4f, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x0c, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xa3, 0x01,
	0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x87, 0x07, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xb0, 0x02,
	0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x6e, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x3a, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xec, 0x02, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2d,
	0x0a, 0x09, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1, 0x01,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x0a, 0x69, 0x66, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x69, 0x66, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x0b, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x42, 0x0a, 0x09, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b,
	0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x02, 0x0a, 0x0e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2a, 0x56, 0x0a, 0x05, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x2a, 0x24, 0x0a, 0x0c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x32,
	0xd8, 0x02, 0x0a, 0x06, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x04, 0x45, 0x78, 0x65,
	0x63, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frames_proto_rawDescOnce sync.Once
	file_frames_proto_rawDescData = file_frames_proto_rawDesc
)

func file_frames_proto_rawDescGZIP() []byte {
	file_frames_proto_rawDescOnce.Do(func() {
		file_frames_proto_rawDescData = protoimpl.X.CompressGZIP(file_frames_proto_rawDescData)
	})
	return file_frames_proto_rawDescData
}

var file_frames_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_frames_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_frames_proto_goTypes = []interface{}{
	(DType)(0),                  // 0: pb.DType
	(ErrorOptions)(0),           // 1: pb.ErrorOptions
	(Column_Kind)(0),            // 2: pb.Column.Kind
	(*Column)(nil),              // 3: pb.Column
	(*Value)(nil),               // 4: pb.Value
	(*NullValuesMap)(nil),       // 5: pb.NullValuesMap
	(*Frame)(nil),               // 6: pb.Frame
	(*SchemaField)(nil),         // 7: pb.SchemaField
	(*SchemaKey)(nil),           // 8: pb.SchemaKey
	(*TableSchema)(nil),         // 9: pb.TableSchema
	(*JoinStruct)(nil),          // 10: pb.JoinStruct
	(*Session)(nil),             // 11: pb.Session
	(*ReadRequest)(nil),         // 12: pb.ReadRequest
	(*InitialWriteRequest)(nil), // 13: pb.InitialWriteRequest
	(*WriteRequest)(nil),        // 14: pb.WriteRequest
	(*WriteRespose)(nil),        // 15: pb.WriteRespose
	(*CreateRequest)(nil),       // 16: pb.CreateRequest
	(*CreateResponse)(nil),      // 17: pb.CreateResponse
	(*DeleteRequest)(nil),       // 18: pb.DeleteRequest
	(*DeleteResponse)(nil),      // 19: pb.DeleteResponse
	(*VersionRequest)(nil),      // 20: pb.VersionRequest
	(*ExecResponse)(nil),        // 21: pb.ExecResponse
	(*ExecRequest)(nil),         // 22: pb.ExecRequest
	(*VersionResponse)(nil),     // 23: pb.VersionResponse
	(*HistoryRequest)(nil),      // 24: pb.HistoryRequest
	nil,                         // 25: pb.NullValuesMap.NullColumnsEntry
	nil,                         // 26: pb.Frame.LabelsEntry
	nil,                         // 27: pb.SchemaField.PropertiesEntry
	nil,                         // 28: pb.ExecRequest.ArgsEntry
}
var file_frames_proto_depIdxs = []int32{
	2,  // 0: pb.Column.kind:type_name -> pb.Column.Kind
	0,  // 1: pb.Column.dtype:type_name -> pb.DType
	25, // 2: pb.NullValuesMap.nullColumns:type_name -> pb.NullValuesMap.NullColumnsEntry
	3,  // 3: pb.Frame.columns:type_name -> pb.Column
	3,  // 4: pb.Frame.indices:type_name -> pb.Column
	26, // 5: pb.Frame.labels:type_name -> pb.Frame.LabelsEntry
	5,  // 6: pb.Frame.null_values:type_name -> pb.NullValuesMap
	4,  // 7: pb.SchemaField.default:type_name -> pb.Value
	27, // 8: pb.SchemaField.properties:type_name -> pb.SchemaField.PropertiesEntry
	7,  // 9: pb.TableSchema.fields:type_name -> pb.SchemaField
	8,  // 10: pb.TableSchema.key:type_name -> pb.SchemaKey
	11, // 11: pb.ReadRequest.session:type_name -> pb.Session
	9,  // 12: pb.ReadRequest.schema:type_name -> pb.TableSchema
	10, // 13: pb.ReadRequest.join:type_name -> pb.JoinStruct
	11, // 14: pb.InitialWriteRequest.session:type_name -> pb.Session
	6,  // 15: pb.InitialWriteRequest.initial_data:type_name -> pb.Frame
	13, // 16: pb.WriteRequest.request:type_name -> pb.InitialWriteRequest
	6,  // 17: pb.WriteRequest.frame:type_name -> pb.Frame
	11, // 18: pb.CreateRequest.session:type_name -> pb.Session
	9,  // 19: pb.CreateRequest.schema:type_name -> pb.TableSchema
	1,  // 20: pb.CreateRequest.if_exists:type_name -> pb.ErrorOptions
	11, // 21: pb.DeleteRequest.session:type_name -> pb.Session
	1,  // 22: pb.DeleteRequest.if_missing:type_name -> pb.ErrorOptions
	6,  // 23: pb.ExecResponse.frame:type_name -> pb.Frame
	11, // 24: pb.ExecRequest.session:type_name -> pb.Session
	28, // 25: pb.ExecRequest.args:type_name -> pb.ExecRequest.ArgsEntry
	11, // 26: pb.HistoryRequest.session:type_name -> pb.Session
	4,  // 27: pb.Frame.LabelsEntry.value:type_name -> pb.Value
	4,  // 28: pb.SchemaField.PropertiesEntry.value:type_name -> pb.Value
	4,  // 29: pb.ExecRequest.ArgsEntry.value:type_name -> pb.Value
	12, // 30: pb.Frames.Read:input_type -> pb.ReadRequest
	14, // 31: pb.Frames.Write:input_type -> pb.WriteRequest
	16, // 32: pb.Frames.Create:input_type -> pb.CreateRequest
	18, // 33: pb.Frames.Delete:input_type -> pb.DeleteRequest
	22, // 34: pb.Frames.Exec:input_type -> pb.ExecRequest
	24, // 35: pb.Frames.History:input_type -> pb.HistoryRequest
	20, // 36: pb.Frames.Version:input_type -> pb.VersionRequest
	6,  // 37: pb.Frames.Read:output_type -> pb.Frame
	15, // 38: pb.Frames.Write:output_type -> pb.WriteRespose
	17, // 39: pb.Frames.Create:output_type -> pb.CreateResponse
	19, // 40: pb.Frames.Delete:output_type -> pb.DeleteResponse
	21, // 41: pb.Frames.Exec:output_type -> pb.ExecResponse
	6,  // 42: pb.Frames.History:output_type -> pb.Frame
	23, // 43: pb.Frames.Version:output_type -> pb.VersionResponse
	37, // [37:44] is the sub-list for method output_type
	30, // [30:37] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_frames_proto_init() }
func file_frames_proto_init() {
	if File_frames_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frames_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullValuesMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRespose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_frames_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Value_Ival)(nil),
		(*Value_Fval)(nil),
		(*Value_Sval)(nil),
		(*Value_Tval)(nil),
		(*Value_Bval)(nil),
	}
	file_frames_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*WriteRequest_Request)(nil),
		(*WriteRequest_Frame)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frames_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frames_proto_goTypes,
		DependencyIndexes: file_frames_proto_depIdxs,
		EnumInfos:         file_frames_proto_enumTypes,
		MessageInfos:      file_frames_proto_msgTypes,
	}.Build()
	File_frames_proto = out.File
	file_frames_proto_rawDesc = nil
	file_frames_proto_goTypes = nil
	file_frames_proto_depIdxs = nil
}
