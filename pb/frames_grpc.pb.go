// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: frames.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FramesClient is the client API for Frames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FramesClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Frames_ReadClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Frames_WriteClient, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (Frames_HistoryClient, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type framesClient struct {
	cc grpc.ClientConnInterface
}

func NewFramesClient(cc grpc.ClientConnInterface) FramesClient {
	return &framesClient{cc}
}

func (c *framesClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Frames_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frames_ServiceDesc.Streams[0], "/pb.Frames/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &framesReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Frames_ReadClient interface {
	Recv() (*Frame, error)
	grpc.ClientStream
}

type framesReadClient struct {
	grpc.ClientStream
}

func (x *framesReadClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *framesClient) Write(ctx context.Context, opts ...grpc.CallOption) (Frames_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frames_ServiceDesc.Streams[1], "/pb.Frames/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &framesWriteClient{stream}
	return x, nil
}

type Frames_WriteClient interface {
	Send(*WriteRequest) error
	CloseAndRecv() (*WriteRespose, error)
	grpc.ClientStream
}

type framesWriteClient struct {
	grpc.ClientStream
}

func (x *framesWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *framesWriteClient) CloseAndRecv() (*WriteRespose, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteRespose)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *framesClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/pb.Frames/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *framesClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.Frames/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *framesClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/pb.Frames/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *framesClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (Frames_HistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frames_ServiceDesc.Streams[2], "/pb.Frames/History", opts...)
	if err != nil {
		return nil, err
	}
	x := &framesHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Frames_HistoryClient interface {
	Recv() (*Frame, error)
	grpc.ClientStream
}

type framesHistoryClient struct {
	grpc.ClientStream
}

func (x *framesHistoryClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *framesClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/pb.Frames/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FramesServer is the server API for Frames service.
// All implementations should embed UnimplementedFramesServer
// for forward compatibility
type FramesServer interface {
	Read(*ReadRequest, Frames_ReadServer) error
	Write(Frames_WriteServer) error
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	History(*HistoryRequest, Frames_HistoryServer) error
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

// UnimplementedFramesServer should be embedded to have forward compatible implementations.
type UnimplementedFramesServer struct {
}

func (UnimplementedFramesServer) Read(*ReadRequest, Frames_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedFramesServer) Write(Frames_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedFramesServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFramesServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFramesServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedFramesServer) History(*HistoryRequest, Frames_HistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedFramesServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

// UnsafeFramesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FramesServer will
// result in compilation errors.
type UnsafeFramesServer interface {
	mustEmbedUnimplementedFramesServer()
}

func RegisterFramesServer(s grpc.ServiceRegistrar, srv FramesServer) {
	s.RegisterService(&Frames_ServiceDesc, srv)
}

func _Frames_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FramesServer).Read(m, &framesReadServer{stream})
}

type Frames_ReadServer interface {
	Send(*Frame) error
	grpc.ServerStream
}

type framesReadServer struct {
	grpc.ServerStream
}

func (x *framesReadServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func _Frames_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FramesServer).Write(&framesWriteServer{stream})
}

type Frames_WriteServer interface {
	SendAndClose(*WriteRespose) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type framesWriteServer struct {
	grpc.ServerStream
}

func (x *framesWriteServer) SendAndClose(m *WriteRespose) error {
	return x.ServerStream.SendMsg(m)
}

func (x *framesWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Frames_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Frames/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramesServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frames_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Frames/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramesServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frames_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramesServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Frames/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramesServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frames_History_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FramesServer).History(m, &framesHistoryServer{stream})
}

type Frames_HistoryServer interface {
	Send(*Frame) error
	grpc.ServerStream
}

type framesHistoryServer struct {
	grpc.ServerStream
}

func (x *framesHistoryServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func _Frames_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramesServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Frames/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramesServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Frames_ServiceDesc is the grpc.ServiceDesc for Frames service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frames_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Frames",
	HandlerType: (*FramesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Frames_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Frames_Delete_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Frames_Exec_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Frames_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Frames_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _Frames_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "History",
			Handler:       _Frames_History_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "frames.proto",
}
